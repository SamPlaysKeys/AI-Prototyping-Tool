name: CI/CD Pipeline

on:
  workflow_dispatch: # Manual trigger only
  # Automatic triggers disabled - see TODO.md for setup instructions
  # Uncomment when ready:
  # push:
  #   branches: [ main, develop ]
  # pull_request:
  #   branches: [ main ]
  # release:
  #   types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Job 1: Code Quality and Testing
  test:
    name: Tests and Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[dev]"
        
    - name: Lint with flake8
      run: |
        flake8 src/ cli/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ cli/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Format check with black
      run: |
        black --check --diff src/ cli/ tests/
        
    - name: Type checking with mypy (if installed)
      run: |
        if pip show mypy >/dev/null 2>&1; then
          mypy src/ cli/ || true
        else
          echo "MyPy not installed, skipping type checking"
        fi
        
    - name: Security check with bandit
      run: |
        if pip show bandit >/dev/null 2>&1; then
          bandit -r src/ cli/ || true
        else
          echo "Bandit not installed, skipping security check"
        fi
        
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=src --cov=cli --cov-report=xml --cov-report=term
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Job 2: Documentation Validation
  docs:
    name: Documentation Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install mermaid-cli
      run: npm install -g @mermaid-js/mermaid-cli
      
    - name: Validate Mermaid diagrams
      run: |
        chmod +x scripts/validate_mermaid.sh
        ./scripts/validate_mermaid.sh || echo "Mermaid validation failed, but continuing..."
        
    - name: Check Markdown links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/markdown-link-check-config.json'

  # Job 3: Docker Build and Test
  docker:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t ai-prototyping-tool:test .
        
    - name: Test Docker image
      run: |
        docker run --rm ai-prototyping-tool:test --help
        
    - name: Build web Docker image
      run: |
        cd web
        docker build -t ai-prototyping-tool-web:test .
        
    - name: Test web Docker image
      run: |
        docker run -d --name test-web -p 8000:8000 ai-prototyping-tool-web:test
        sleep 10
        curl -f http://localhost:8000/health || true
        docker stop test-web

  # Job 4: Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 5: Build and Publish
  build-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: [test, docs, docker]
    if: github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Publish to TestPyPI (on main branch)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/* || echo "Upload to TestPyPI failed or already exists"
        
    - name: Publish to PyPI (on release)
      if: github.event_name == 'release'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  # Job 6: Docker Registry Push
  docker-publish:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: [test, docs, docker]
    if: github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push CLI Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Web Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./web
        push: true
        tags: ghcr.io/${{ github.repository }}-web:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 7: Deploy to Staging/Production
  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: [build-publish, docker-publish]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Kubernetes (if configured)
      run: |
        echo "Deployment would happen here"
        echo "You can add kubectl, helm, or other deployment tools"
        # Example:
        # kubectl apply -f k8s/
        # helm upgrade --install ai-prototyping-tool ./helm/ai-prototyping-tool
        
    - name: Notify deployment
      run: |
        echo "Deployment completed successfully"
        echo "Version: ${{ github.event.release.tag_name }}"
        echo "Environment: production"

