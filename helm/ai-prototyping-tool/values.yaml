# Default values for ai-prototyping-tool
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Application configuration
app:
  name: ai-prototyping-tool
  version: "1.0.0"
  environment: production
  debug: false

# Web application configuration
web:
  enabled: true
  replicaCount: 2

  image:
    repository: ai-prototyping-tool
    tag: "1.0.0"
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000
    annotations: {}

  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"

  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  nodeSelector: {}
  tolerations: []
  affinity: {}

  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000

  # Container security context
  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false
    capabilities:
      drop:
      - ALL

# LM Studio Mock service configuration
lmstudioMock:
  enabled: true
  replicaCount: 1

  image:
    repository: lmstudio-mock
    tag: "1.0.0"
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 1234
    targetPort: 1234
    annotations: {}

  resources:
    requests:
      memory: "128Mi"
      cpu: "50m"
    limits:
      memory: "256Mi"
      cpu: "200m"

  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000

  # Container security context
  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
      - ALL

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
  hosts:
    - host: ai-prototyping-tool.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: ai-prototyping-tool-tls
  #    hosts:
  #      - ai-prototyping-tool.local

# Configuration management
config:
  # Create a ConfigMap with application configuration
  create: true
  # Mount the config file
  mountPath: /app/config.toml
  # Configuration data
  data:
    app:
      name: "AI Prototyping Tool"
      version: "1.0.0"
      environment: "production"
      debug: false
    server:
      host: "0.0.0.0"
      port: 8000
      workers: 1
      reload: false
    logging:
      level: "INFO"
      format: "structured"
      enable_file_logging: true
      log_directory: "logs"
      max_file_size_mb: 10
      max_files: 5
      enable_trace_ids: true
    lm_studio:
      base_url: "http://lmstudio-mock-service:1234"
      api_key: ""
      auto_detect: true
      health_check_interval: 30
      connection_timeout: 5.0
      request_timeout: 120.0
    model:
      default_name: ""
      max_tokens: 2048
      temperature: 0.7
      top_p: 0.9
      retries: 3
    output:
      format: "markdown"
      theme: "default"
      merge_deliverables: true
      include_toc: true
      add_metadata: true
      auto_save: true
      output_directory: "./output"
    deliverables:
      default_types: ["problem_statement"]
      completion_mode: "sequential"
      parallel_limit: 3
      template_directory: "templates"
    error_handling:
      enable_global_handler: true
      user_friendly_messages: true
      include_stack_traces: false
      log_errors: true
      error_page_template: "error.html"
    security:
      enable_cors: true
      allowed_origins: ["*"]
      api_key_header: "X-API-Key"
      rate_limit_requests: 100
      rate_limit_window: 3600
    monitoring:
      enable_metrics: true
      metrics_endpoint: "/metrics"
      health_endpoint: "/health"
      ready_endpoint: "/ready"

# Persistence configuration
persistence:
  enabled: true
  # Storage class to use
  storageClass: ""
  # Access mode
  accessMode: ReadWriteOnce
  # Size of the volume
  size: 1Gi
  # Annotations for PVC
  annotations: {}

# Service account configuration
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Pod disruption budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  # maxUnavailable: 1

# Network policies
networkPolicy:
  enabled: false
  policyTypes:
    - Ingress
    - Egress
  ingress: []
  egress: []

# Monitoring configuration
monitoring:
  # Enable Prometheus monitoring
  prometheus:
    enabled: true
    port: 8000
    path: /metrics
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "8000"
      prometheus.io/path: "/metrics"

  # ServiceMonitor for Prometheus Operator
  serviceMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    labels: {}

# Extra environment variables
extraEnvVars: []
# - name: EXAMPLE_VAR
#   value: "example-value"

# Extra environment variables from ConfigMaps or Secrets
extraEnvVarsSecret: ""
extraEnvVarsConfigMap: ""

# Extra volumes
extraVolumes: []
# - name: extra-volume
#   configMap:
#     name: extra-configmap

# Extra volume mounts
extraVolumeMounts: []
# - name: extra-volume
#   mountPath: /extra
#   readOnly: true

# Init containers
initContainers: []
# - name: init-container
#   image: busybox:1.35
#   command: ['sh', '-c', 'echo "Initializing..."']

# Sidecar containers
sidecarContainers: []
# - name: sidecar
#   image: nginx:alpine
#   ports:
#   - containerPort: 80
