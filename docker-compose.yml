version: '3.8'

services:
  # Main AI Prototyping Tool Web Application
  ai-prototyping-web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ai-prototyping-web
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - AIPROTO_APP_ENVIRONMENT=development
      - AIPROTO_APP_DEBUG=false
      - AIPROTO_LM_STUDIO_BASE_URL=http://lmstudio-mock:1234
      - AIPROTO_LOGGING_LEVEL=INFO
      - AIPROTO_SERVER_HOST=0.0.0.0
      - AIPROTO_SERVER_PORT=8000
    volumes:
      - ./output:/app/output
      - ./logs:/app/logs
      - ./config.toml:/app/config.toml:ro
    depends_on:
      lmstudio-mock:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai-prototyping-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai-prototyping-web.rule=Host(`localhost`)"
      - "traefik.http.services.ai-prototyping-web.loadbalancer.server.port=8000"

  # Mock LM Studio Service for Testing
  lmstudio-mock:
    build:
      context: ./docker/lmstudio-mock
      dockerfile: Dockerfile
    container_name: lmstudio-mock
    ports:
      - "1234:1234"
    environment:
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1234/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - ai-prototyping-network
    labels:
      - "traefik.enable=false"

  # Redis for caching and session storage (optional)
  redis:
    image: redis:7-alpine
    container_name: ai-prototyping-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-prototyping-network
    labels:
      - "traefik.enable=false"

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: ai-prototyping-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - ai-prototyping-web
    restart: unless-stopped
    networks:
      - ai-prototyping-network
    profiles:
      - "production"

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-prototyping-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - ai-prototyping-network
    profiles:
      - "monitoring"

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ai-prototyping-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - ai-prototyping-network
    profiles:
      - "monitoring"

networks:
  ai-prototyping-network:
    driver: bridge
    name: ai-prototyping-network

volumes:
  redis_data:
    driver: local
    name: ai-prototyping-redis-data
  prometheus_data:
    driver: local
    name: ai-prototyping-prometheus-data
  grafana_data:
    driver: local
    name: ai-prototyping-grafana-data
